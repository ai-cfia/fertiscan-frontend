/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
import type { Configuration } from "../configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  setBasicAuthToObject,
  setSearchParams,
  toPathString,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  RequiredError,
  operationServerMap,
  type RequestArgs,
} from "../base";
// @ts-ignore
// @ts-ignore
import type { LabelData } from "../model";
/**
 * PipelineApi - axios parameter creator
 * @export
 */
export const PipelineApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Analyze Document
     * @param {Array<File>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyzeDocumentAnalyzePost: async (
      files: Array<File>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'files' is not null or undefined
      assertParamExists("analyzeDocumentAnalyzePost", "files", files);
      const localVarPath = `/analyze`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication HTTPBasic required
      // http basic authentication required
      setBasicAuthToObject(localVarRequestOptions, configuration);

      if (files) {
        files.forEach((element) => {
          localVarFormParams.append("files", element as any);
        });
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PipelineApi - functional programming interface
 * @export
 */
export const PipelineApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PipelineApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Analyze Document
     * @param {Array<File>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async analyzeDocumentAnalyzePost(
      files: Array<File>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelData>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.analyzeDocumentAnalyzePost(
          files,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PipelineApi.analyzeDocumentAnalyzePost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PipelineApi - factory interface
 * @export
 */
export const PipelineApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PipelineApiFp(configuration);
  return {
    /**
     *
     * @summary Analyze Document
     * @param {Array<File>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyzeDocumentAnalyzePost(
      files: Array<File>,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<LabelData> {
      return localVarFp
        .analyzeDocumentAnalyzePost(files, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PipelineApi - object-oriented interface
 * @export
 * @class PipelineApi
 * @extends {BaseAPI}
 */
export class PipelineApi extends BaseAPI {
  /**
   *
   * @summary Analyze Document
   * @param {Array<File>} files
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PipelineApi
   */
  public analyzeDocumentAnalyzePost(
    files: Array<File>,
    options?: RawAxiosRequestConfig,
  ) {
    return PipelineApiFp(this.configuration)
      .analyzeDocumentAnalyzePost(files, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
